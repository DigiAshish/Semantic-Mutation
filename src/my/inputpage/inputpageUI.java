/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.inputpage;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;


/**
 *
 * @author akhiluchil
 */
public class inputpageUI extends javax.swing.JFrame {

    /**
     * Creates new form inputpageUI
     */
    JFileChooser fc;
    String numInputs;
    String filename;
    static final String directory = "C:\\file store";
    
    char[][] perm = new char[10000000][20];                                     // to store all permutations
    String program1;                                                            // to store the input program ( & perform required operations)
    int[] index = new int[100];                                                 // to store the indexes of the operators
    public static int count = 0;                                                // index for index[]
    public static int num = 0;                                                  // number of permutation generated
    
    
    public inputpageUI() {
        super("Input Page");
        String text = "";
        numInputs = "0";
        initComponents();
        try (PrintWriter writer = new PrintWriter("makedir.bat", "UTF-8")) {
            text = text + "IF NOT EXIST " + "\""  + directory  + "\"" + " ( " + "\n";
            text = text + "md " + "\"" + directory + "\"" + "\n" ;
            text = text + ")";
            writer.println(text);
            writer.close();
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        Runtime rt = Runtime.getRuntime();
        try {
            rt.exec("cmd /c"+"makedir.bat");
        } 
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProgramArea = new javax.swing.JTextArea();
        Submit = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Browse = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ErrorArea = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        FileName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        NoOfInputs = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        Input1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Input2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Input3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Input4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Input5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Input6 = new javax.swing.JTextField();
        MutationGeneration = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputArea = new javax.swing.JTextArea();
        Run = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Choose the testcase");

        ProgramArea.setColumns(20);
        ProgramArea.setRows(5);
        jScrollPane1.setViewportView(ProgramArea);

        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        Browse.setText("Browse");
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        ErrorArea.setColumns(20);
        ErrorArea.setRows(5);
        jScrollPane4.setViewportView(ErrorArea);

        jLabel9.setText("Errors");

        jLabel10.setText("Name of the file");

        FileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(Submit)
                        .addGap(18, 18, 18)
                        .addComponent(Clear))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Browse)
                                .addGap(36, 36, 36))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FileName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))))
                .addContainerGap(122, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browse))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Submit)
                    .addComponent(Clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel2.setText("Select the number of inputs");

        NoOfInputs.setMaximumRowCount(6);
        NoOfInputs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6" }));
        NoOfInputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoOfInputsActionPerformed(evt);
            }
        });

        jLabel3.setText("Input 1");

        Input1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Input1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Input 2");

        Input2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Input2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Input 3");

        Input3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Input3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Input 4");

        Input4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Input4ActionPerformed(evt);
            }
        });

        jLabel7.setText("Input 5");

        Input5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Input5ActionPerformed(evt);
            }
        });

        jLabel8.setText("Input 6");

        Input6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Input6ActionPerformed(evt);
            }
        });

        MutationGeneration.setText("Generate Mutants");
        MutationGeneration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MutationGenerationActionPerformed(evt);
            }
        });

        OutputArea.setColumns(20);
        OutputArea.setRows(5);
        jScrollPane2.setViewportView(OutputArea);

        Run.setText("Run ");
        Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(MutationGeneration))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Input5))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Input3))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Input1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(Input6))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(Input4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(52, 52, 52)
                                        .addComponent(Run))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(113, 113, 113)
                                        .addComponent(Input2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(97, 97, 97)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(NoOfInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NoOfInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Input2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Input1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Input3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Input4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Run)
                        .addGap(31, 31, 31)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Input5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Input6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(MutationGeneration)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Input1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Input1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Input1ActionPerformed

    private void Input2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Input2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Input2ActionPerformed

    private void Input3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Input3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Input3ActionPerformed

    private void Input4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Input4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Input4ActionPerformed

    private void Input5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Input5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Input5ActionPerformed

    private void Input6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Input6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Input6ActionPerformed

    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        String text="";
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        java.io.File file = new java.io.File(filename);
        try{
            Scanner input = new Scanner(file);
            while(input.hasNext()){
                text = text + input.nextLine() + "\n";
                
            }
            ProgramArea.setText(text);
        }
        catch(FileNotFoundException e){
            System.err.format("File does not exist \n");
        }        
        
        
    }//GEN-LAST:event_BrowseActionPerformed

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        // TODO add your handling code here:
        ProgramArea.setEditable(false);
        String text0 = "",text1 = "", text2 = "",text3 = "", text4 = "",text5 = "", text6 = "";
        filename = FileName.getText();
        try (PrintWriter writer = new PrintWriter("makefiledir.bat")) {
            text0 = text0 + "IF EXIST " + "\""  + directory  + "\\" + filename + "\"" + " ( " + "\n";
            text1 = text1 + "rmdir /s /q " + "\"" + directory + "\\" + filename + "\"" + "\n" ; 
            text2 = text2 + " md " + "\"" + directory + "\\" + filename + "\"" + "\n" ;
            text3 = text3 + " )";
            text4 = text4 + " IF NOT EXIST " + "\""  + directory  + "\\" + filename + "\"" + " ( " + "\n";
            text5 = text5 + "md " + "\"" + directory + "\\" + filename + "\"" + "\n" ;
            text6 = text6 + ")";
            writer.println(text0);
            writer.println(text1);
            writer.println(text2);
            writer.println(text3);
            writer.println(text4);
            writer.println(text5);
            writer.println(text6);
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
        Runtime rt = Runtime.getRuntime();
        try {
            rt.exec("cmd /c"+"makefiledir.bat");
        } 
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String text = directory + "\\" + filename + "\\" + filename + ".c";      
        try{
            FileWriter writer = new FileWriter (text);
            BufferedWriter bw =new BufferedWriter ( writer );
            ProgramArea.write(bw);
        }
        catch (IOException e) {
            System.out.println("error");
        }
           
        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("compile.bat")) {
            
            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
            text1 = text1 + "gcc " + filename + ".c" + " 2> error.txt -o " + filename;
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
        Runtime rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+"compile.bat");
        } 
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
               
    }//GEN-LAST:event_SubmitActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        String text="";
        ProgramArea.setText(text);
    }//GEN-LAST:event_ClearActionPerformed

    private void NoOfInputsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoOfInputsActionPerformed
        // TODO add your handling code here:
        Object selectedItem = NoOfInputs.getSelectedItem();
        if (selectedItem != null)
        {
            String selectedItemStr = selectedItem.toString();
            numInputs = selectedItemStr;
            switch (selectedItemStr) 
            {
            case "1":
                Input1.setEditable(true);
                Input2.setEditable(false);
                Input3.setEditable(false);
                Input4.setEditable(false);
                Input5.setEditable(false);
                Input6.setEditable(false);
                break;
            case "2":
                Input1.setEditable(true);
                Input2.setEditable(true);
                Input3.setEditable(false);
                Input4.setEditable(false);
                Input5.setEditable(false);
                Input6.setEditable(false);
                break;
            case "3":
                Input1.setEditable(true);
                Input2.setEditable(true);
                Input3.setEditable(true);
                Input4.setEditable(false);
                Input5.setEditable(false);
                Input6.setEditable(false);
                break;
            case "4":
                Input1.setEditable(true);
                Input2.setEditable(true);
                Input3.setEditable(true);
                Input4.setEditable(true);
                Input5.setEditable(false);
                Input6.setEditable(false);
                break;
            case "5":
                Input1.setEditable(true);
                Input2.setEditable(true);
                Input3.setEditable(true);
                Input4.setEditable(true);
                Input5.setEditable(true);
                Input6.setEditable(false);
                break;
            case "6":
                Input1.setEditable(true);
                Input2.setEditable(true);
                Input3.setEditable(true);
                Input4.setEditable(true);
                Input5.setEditable(true);
                Input6.setEditable(true);
                break;
            default:
                Input1.setEditable(false);
                Input2.setEditable(false);
                Input3.setEditable(false);
                Input4.setEditable(false);
                Input5.setEditable(false);
                Input6.setEditable(false);
                break;
        }
        }
        
    }//GEN-LAST:event_NoOfInputsActionPerformed

    private void RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunActionPerformed
        // TODO add your handling code here:
        switch (numInputs) 
            {
            case "1":
                        String text0 = "";
                        String text1 = "";
                        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            
                            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
                            text1 = text1 + filename + ".exe " + Input1.getText() +" > output.txt";
                            writer1.println(text0);
                            writer1.println(text1);
                            writer1.close();
                        } catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                        Runtime rt1 = Runtime.getRuntime();
                        try {
                            rt1.exec("cmd /c"+" run.bat");
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                break;
            case "2":
                        text0 = "";
                        text1 = "";
                        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            
                            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
                            text1 = text1 + filename + ".exe " + Input1.getText() + " " + Input2.getText() +" > output.txt";
                            writer1.println(text0);
                            writer1.println(text1);
                            writer1.close();
                            System.out.println(text1);
                        } catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                        rt1 = Runtime.getRuntime();
                        try {
                            rt1.exec("cmd /c"+" run.bat");
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                break;
                
            case "3":
                        text0 = "";
                        text1 = "";
                        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            
                            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
                            text1 = text1 + filename + ".exe " + Input1.getText() + " " + Input2.getText()+ " " + Input3.getText()  +" > output.txt";
                            writer1.println(text0);
                            writer1.println(text1);
                            writer1.close();
                        } catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                        rt1 = Runtime.getRuntime();
                        try {
                            rt1.exec("cmd /c"+" run.bat");
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                break;
                
            case "4":
                        text0 = "";
                        text1 = "";
                        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            
                            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
                            text1 = text1 + filename + ".exe " + Input1.getText() + " " + Input2.getText()+ " " + Input3.getText() + " " + Input4.getText()  +" > output.txt";
                            writer1.println(text0);
                            writer1.println(text1);
                            writer1.close();
                        } catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                        rt1 = Runtime.getRuntime();
                        try {
                            rt1.exec("cmd /c"+" run.bat");
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                break;
            case "5":
                        text0 = "";
                        text1 = "";
                        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            
                            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
                            text1 = text1 + filename + ".exe " + Input1.getText() + " " + Input2.getText()+ " " + Input3.getText() + " " + Input4.getText() + " " + Input5.getText()  +" > output.txt";
                            writer1.println(text0);
                            writer1.println(text1);
                            writer1.close();
                        } catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                        rt1 = Runtime.getRuntime();
                        try {
                            rt1.exec("cmd /c"+" run.bat");
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                break;
                
                case "6":
                        text0 = "";
                        text1 = "";
                        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            
                            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
                            text1 = text1 + filename + ".exe " + Input1.getText() + " " + Input2.getText()+ " " + Input3.getText() + " " + Input4.getText() + " " + Input5.getText() + " " + Input6.getText() +" > output.txt";
                            writer1.println(text0);
                            writer1.println(text1);
                            writer1.close();
                        } catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                        rt1 = Runtime.getRuntime();
                        try {
                            rt1.exec("cmd /c"+" run.bat");
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                break;
                
                
            default:
                        text0 = "";
                        text1 = "";
                        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            
                            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\"" ;
                            text1 = text1 + filename + ".exe" + " a.out > output.txt";
                            writer1.println(text0);
                            writer1.println(text1);
                            writer1.close();
                        } catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                        rt1 = Runtime.getRuntime();
                        try {
                            rt1.exec("cmd /c"+" run.bat");
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                break;
        }
        String text="";
        File f = new File( directory + "\\" + filename + "\\" + "output.txt");
        String file1 = f.getAbsolutePath();
        java.io.File file = new java.io.File(file1);
        try{
            Scanner input = new Scanner(file);
            while(input.hasNext()){
                text = text + input.nextLine() + "\n";
                
            }
            OutputArea.setText(text);
        }
        catch(FileNotFoundException e){
            System.err.format("File does not exist \n");
        }
        String ashish = directory  + "\\" +  "GetFileName.txt";
        //OutputArea.setText(ashish);
     try{
         FileWriter writer = new FileWriter( ashish );
         BufferedWriter bw = new BufferedWriter ( writer );
         FileName.write(bw);
     }  catch (IOException ex) {
            Logger.getLogger(MutatationWindow.class.getName()).log(Level.SEVERE, null, ex);
     }
        
    }//GEN-LAST:event_RunActionPerformed

    private void FileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileNameActionPerformed

    private void MutationGenerationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MutationGenerationActionPerformed
        // TODO add your handling code here:
        
        
        
        String program = ProgramArea.getText();
        program1 = program;
        
        int curindex = 0;                                                       //keep track of the current index
        int previndex = -1;                                                     //keep track of the previous index - to check if no more operators are present
        int sym1,sym2,sym3,sym4,sym5;                                           //to keep track of all the operators individually i.e., their next index positions
        int nearest;                                                            //to know the nearest operator
        int quotes[] = new int[1000];                                                           //to store the position of quotes
        int quotecount;
        int i = 0;
        int j = 0;
        while(i<program1.length()){
            if(program1.charAt(i)=='\"'){
                quotes[j++] = i;
                System.out.println("Quote position " + i);
            }
                
            i++;
        }
        quotecount = j/2;
        System.out.println("Number of quote pairs = " + quotecount);
        for(i=0;i<quotecount;i++){
            System.out.println("Opening quote = " + quotes[2*i] + " Closing Quotes = " + quotes[(2*i)+1]);
        }
        
        while(previndex != curindex){
           previndex = curindex;
           //sym6 = program1.indexOf("\"",curindex);                              //to get opening double quotes
           //sym7 = program1.indexOf("\"",(sym6 + 1));                            //to get closing double quotes
           //System.out.println("Opening quotes = " + sym6);
           //System.out.println("Closing quotes = " + sym7);
           sym1 = program1.indexOf("+",curindex);
           for(i=0;i<quotecount;i++){                                     //to ignore symbol between double quotes
               if(sym1>quotes[2*i] && sym1<quotes[(2*i)+1])
                    sym1 = program1.indexOf("+",(sym1 + 1));
           }
           sym2 = program1.indexOf("-",curindex);
           for(i=0;i<quotecount;i++){                                     //to ignore symbol between double quotes
               if(sym2>quotes[2*i] && sym2<quotes[(2*i)+1])
                sym2 = program1.indexOf("-",(sym2 + 1));
           }
           sym3 = program1.indexOf("*",curindex);
           for(i=0;i<quotecount;i++){                                     //to ignore symbol between double quotes
               if(sym3>quotes[2*i] && sym3<quotes[(2*i)+1])
                sym3 = program1.indexOf("*",(sym3 + 1));
           }
           sym4 = program1.indexOf("/",curindex);
           for(i=0;i<quotecount;i++){                                     //to ignore symbol between double quotes
               if(sym4>quotes[2*i] && sym4<quotes[(2*i)+1])
                sym4 = program1.indexOf("/",(sym4 + 1));
           }
           
           sym5 = program1.indexOf("%",curindex);
           for(i=0;i<quotecount;i++){                                     //to ignore symbol between double quotes
               if(sym5>quotes[2*i] && sym5<quotes[(2*i)+1])
                sym5 = program1.indexOf("%",(sym5 + 1));
           }
           //System.out.println("at 196 "+ program1.charAt(196));
           //System.out.println("\n sym1 = " + sym1 +" sym2 = " + sym2 +" sym3 = " + sym3 +" sym4 = " + sym4 +" sym5 = " + sym5);
           if((sym1 != -1) || (sym2 != -1) || (sym3 != -1) || (sym4 != -1) || (sym5 != -1)){
               nearest = 100000;
               if((sym1 != -1)&&(sym1<nearest))
                   nearest = sym1;
               else if((sym2 != -1)&&(sym2<nearest))
                   nearest = sym2;
               else if((sym3 != -1)&&(sym3<nearest))
                   nearest = sym3;
               else if((sym4 != -1)&&(sym4<nearest))
                   nearest = sym4;
               else
                   nearest = sym5;
               System.out.println("\n Nearest = " + nearest + "Symbol = "+ program1.charAt(nearest));
               index[count] = nearest;
               count++;
               curindex = nearest + 1;                           //to check after the current symbol on the next iteration
               
           }
               
        }
        System.out.println("Count = " + count +"\n");
        for(i = 0; i<count;i++) {
            System.out.println("\n" + index[i]);
            //System.out.println(" Symbol = " + program1[index[i]]);
    }
    
    permute(count,"+-*/%","");
        
    String text0="";
    try (PrintWriter writer = new PrintWriter("makefiledir.bat")) {
        text0 = text0 + " md " + "\"" + directory + "\\" + filename + "\\" + "Mutation" + "\"" + "\n" ;
        writer.println(text0);
        writer.close();
    } catch (IOException ex) {
        Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
    }
    Runtime rt = Runtime.getRuntime();
    try {
        rt.exec("cmd /c"+"makefiledir.bat");
    }
    catch (IOException ex) {
        Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
    }
    
    try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    
    char[] program2;
    program2 = program1.toCharArray();
    //System.out.println(program2);
    for( i = 0; i < num; i++) {                                      // to run for number of permutation of the given operators
        for(j=0;j<count;j++){                                               // to run for number of operators in the program
            program2[index[j]] = perm[i][j];                              // to do the particular permutation in the program
        }
        System.out.println(program2);                                       // print the program with particular permutation 
        String text = directory + "\\" + filename + "\\" + "Mutation" + "\\" + "code" + (i+1) + ".c";      
        try{
            FileWriter writer = new FileWriter (text);
            BufferedWriter bw =new BufferedWriter ( writer );
            bw.write(program2);
            bw.close();
        }
        catch (IOException e) {
            System.out.println("error");
        }

        text0 = "";
        String text1 = "";
        try (PrintWriter writer1 = new PrintWriter("compile.bat")) {

            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" +"Mutation" + "\"" ;
            text1 = text1 + "gcc " + "code" + (i+1) + ".c" + " 2> error" + (i+1) + ".txt -o " + "code" + (i+1);
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        Runtime rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+"compile.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" + "Mutation" + "\"" ;
            if("1".equals(numInputs))
                text1 = text1 + "code" + (i+1) + ".exe" + " " + Input1.getText() + " > result" + (i+1) + ".txt";
            if("2".equals(numInputs))
                text1 = text1 + "code" + (i+1) + ".exe" + " " + Input1.getText() + " " + Input2.getText() + " > result" + (i+1) + ".txt";
            if("3".equals(numInputs))
                text1 = text1 + "code" + (i+1) + ".exe" + " " + Input1.getText() + " " + Input2.getText() + " " + Input3.getText() + " > result" + (i+1) + ".txt";
            if("4".equals(numInputs))
                text1 = text1 + "code" + (i+1) + ".exe" + " " + Input1.getText() + " " + Input2.getText() + " " + Input3.getText() + " " + Input4.getText() + " > result" + (i+1) + ".txt";
            if("5".equals(numInputs))
                text1 = text1 + "code" + (i+1) + ".exe" + " " + Input1.getText() + " " + Input2.getText() + " " + Input3.getText() + " " + Input4.getText() + " " + Input5.getText() + " > result" + (i+1) + ".txt";
            if("6".equals(numInputs))
                text1 = text1 + "code" + (i+1) + ".exe" + " " + Input1.getText() + " " + Input2.getText() + " " + Input3.getText() + " " + Input4.getText() + " " + Input5.getText() + " " + Input6.getText() + " > result" + (i+1) + ".txt";
            else
                text1 = text1 + "code" + (i+1) + ".exe" + " " + "> result" + (i+1) + ".txt";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+" run.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    
    
    
    
    
    
        /*    String program = ProgramArea.getText();
        String program1 = program, program2 = program, program3 = program, program4 = program;
        if ((program.indexOf('+'))!= -1){
            program1 = program1.replace('+','-');
            program2 = program2.replace('+','*');
            program3 = program3.replace('+','/');
            program4 = program4.replace('+','%');
        }
        else if ((program.indexOf('-'))!= -1){
            program1 = program1.replace('-','+');
            program2 = program2.replace('-','*');
            program3 = program3.replace('-','/');
            program4 = program4.replace('-','%');
        }
        else if ((program.indexOf('*'))!= -1){
            program1 = program1.replace('*','+');
            program2 = program2.replace('*','-');
            program3 = program3.replace('*','/');
            program4 = program4.replace('*','%');
        }
        else if ((program.indexOf('/'))!= -1){
            program1 = program1.replace('/','+');
            program2 = program2.replace('/','-');
            program3 = program3.replace('/','*');
            program4 = program4.replace('/','%');
        }
        else {
            program1 = program1.replace('%','+');
            program2 = program2.replace('%','-');
            program3 = program3.replace('%','*');
            program4 = program4.replace('%','/');
        }
        //System.out.println("\n"+ program1 + "\n");
        //System.out.println("\n"+ program2 + "\n");
        //System.out.println("\n"+ program3 + "\n");
        //System.out.println("\n"+ program4 + "\n");

        String text0="";
        try (PrintWriter writer = new PrintWriter("makefiledir.bat")) {
            text0 = text0 + " md " + "\"" + directory + "\\" + filename + "\\" + "Mutation" + "\"" + "\n" ;
            writer.println(text0);
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        Runtime rt = Runtime.getRuntime();
        try {
            rt.exec("cmd /c"+"makefiledir.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        String text = directory + "\\" + filename + "\\" + "Mutation" + "\\" + "code1" + ".c";      
        try{
            FileWriter writer = new FileWriter (text);
            BufferedWriter bw =new BufferedWriter ( writer );
            bw.write(program1);
            bw.close();
        }
        catch (IOException e) {
            System.out.println("error");
        }

        text0 = "";
        String text1 = "";
        try (PrintWriter writer1 = new PrintWriter("compile.bat")) {

            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" +"Mutation" + "\"" ;
            text1 = text1 + "gcc " + "code1" + ".c" + " 2> error1.txt -o " + "code1";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        Runtime rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+"compile.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" + "Mutation" + "\"" ;
            text1 = text1 + "code1" + ".exe" + " a.out > result1.txt";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+" run.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        text = directory + "\\" + filename + "\\" + "Mutation" + "\\" + "code2" + ".c";      
        try{
            FileWriter writer = new FileWriter (text);
            BufferedWriter bw =new BufferedWriter ( writer );
            bw.write(program2);
            bw.close();
        }
        catch (IOException e) {
            System.out.println("error");
        }

        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("compile.bat")) {

            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" +"Mutation" + "\"" ;
            text1 = text1 + "gcc " + "code2" + ".c" + " 2> error2.txt -o " + "code2";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+"compile.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" + "Mutation" + "\"" ;
            text1 = text1 + "code2" + ".exe" + " a.out > result2.txt";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+" run.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        text = directory + "\\" + filename + "\\" + "Mutation" + "\\" + "code3" + ".c";      
        try{
            FileWriter writer = new FileWriter (text);
            BufferedWriter bw =new BufferedWriter ( writer );
            bw.write(program3);
            bw.close();
        }
        catch (IOException e) {
            System.out.println("error");
        }

        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("compile.bat")) {

            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" +"Mutation" + "\"" ;
            text1 = text1 + "gcc " + "code3" + ".c" + " 2> error3.txt -o " + "code3";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+"compile.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" + "Mutation" + "\"" ;
            text1 = text1 + "code3" + ".exe" + " a.out > result3.txt";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+" run.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        text = directory + "\\" + filename + "\\" + "Mutation" + "\\" + "code4" + ".c";      
        try{
            FileWriter writer = new FileWriter (text);
            BufferedWriter bw =new BufferedWriter ( writer );
            bw.write(program4);
            bw.close();
        }
        catch (IOException e) {
            System.out.println("error");
        }

        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("compile.bat")) {

            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" +"Mutation" + "\"" ;
            text1 = text1 + "gcc " + "code4" + ".c" + " 2> error4.txt -o " + "code4";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+"compile.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        text0 = "";
        text1 = "";
        try (PrintWriter writer1 = new PrintWriter("run.bat")) {
            text0 = text0 + "cd " + "\""  + directory  + "\\" + filename + "\\" + "Mutation" + "\"" ;
            text1 = text1 + "code4" + ".exe" + " a.out > result4.txt";
            writer1.println(text0);
            writer1.println(text1);
            writer1.close();
        } catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Thread.sleep(1000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        rt1 = Runtime.getRuntime();
        try {
            rt1.exec("cmd /c"+" run.bat");
        }
        catch (IOException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        MutatationWindow s;
        try {
            s = new MutatationWindow ();
            
            s.setVisible(true);
            //s.setIconImage(new ImageIcon("C:\\Project\\abc.jpg").getImage());
            this.dispose(); // TODO add your handling code here:
        } catch (FileNotFoundException ex) {
            Logger.getLogger(inputpageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MutationGenerationActionPerformed
    public void permute(int length, String domain, String result)
    {
        if (length == 0)
        {
            int i;
            for(i=0;i<count;i++)                                                // used 5
                perm[num][i] = result.charAt(i);
            //result.getChars(0,5,perm[num],0);
            //System.out.println(result.toCharArray());
            //perm[num] = result.toCharArray();
            for(i=0;i<count;i++){
                if(perm[num][i]!=program1.charAt(index[i]))
                    break;
            }
            if(i==count)    
                num--;
            else
                System.out.println(Arrays.toString(perm[num]));
            num++;
        }
        else
        {
            for (int i = 0; i < domain.length(); i++)
                permute(length-1, domain, result + domain.charAt(i));
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inputpageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new inputpageUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browse;
    private javax.swing.JButton Clear;
    private javax.swing.JTextArea ErrorArea;
    private javax.swing.JTextField FileName;
    private javax.swing.JTextField Input1;
    private javax.swing.JTextField Input2;
    private javax.swing.JTextField Input3;
    private javax.swing.JTextField Input4;
    private javax.swing.JTextField Input5;
    private javax.swing.JTextField Input6;
    private javax.swing.JButton MutationGeneration;
    private javax.swing.JComboBox NoOfInputs;
    private javax.swing.JTextArea OutputArea;
    private javax.swing.JTextArea ProgramArea;
    private javax.swing.JButton Run;
    private javax.swing.JButton Submit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
